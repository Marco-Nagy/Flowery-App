// Mocks generated by Mockito 5.4.4 from annotations
// in flowery_e_commerce/test/features/home_screen/presentation/home_cubit/occasions_cubit/occasions_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flowery_e_commerce/core/networking/common/api_result.dart'
    as _i5;
import 'package:flowery_e_commerce/features/home_screen/domain/entities/best_seller_entity.dart'
    as _i6;
import 'package:flowery_e_commerce/features/home_screen/domain/entities/occasions_entity.dart'
    as _i8;
import 'package:flowery_e_commerce/features/home_screen/domain/repository/home_repo.dart'
    as _i2;
import 'package:flowery_e_commerce/features/home_screen/domain/uses_cases/home_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeRepository_0 extends _i1.SmartFake
    implements _i2.HomeRepository {
  _FakeHomeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeUseCase extends _i1.Mock implements _i3.HomeUseCase {
  MockHomeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get homeRepository => (super.noSuchMethod(
        Invocation.getter(#homeRepository),
        returnValue: _FakeHomeRepository_0(
          this,
          Invocation.getter(#homeRepository),
        ),
      ) as _i2.HomeRepository);

  @override
  set homeRepository(_i2.HomeRepository? _homeRepository) => super.noSuchMethod(
        Invocation.setter(
          #homeRepository,
          _homeRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.DataResult<List<_i6.BestSeller>>> callBestSellers() =>
      (super.noSuchMethod(
        Invocation.method(
          #callBestSellers,
          [],
        ),
        returnValue: _i4.Future<_i5.DataResult<List<_i6.BestSeller>>>.value(
            _i7.dummyValue<_i5.DataResult<List<_i6.BestSeller>>>(
          this,
          Invocation.method(
            #callBestSellers,
            [],
          ),
        )),
      ) as _i4.Future<_i5.DataResult<List<_i6.BestSeller>>>);

  @override
  _i4.Future<_i5.DataResult<List<_i8.Occasions>>> callOccasions() =>
      (super.noSuchMethod(
        Invocation.method(
          #callOccasions,
          [],
        ),
        returnValue: _i4.Future<_i5.DataResult<List<_i8.Occasions>>>.value(
            _i7.dummyValue<_i5.DataResult<List<_i8.Occasions>>>(
          this,
          Invocation.method(
            #callOccasions,
            [],
          ),
        )),
      ) as _i4.Future<_i5.DataResult<List<_i8.Occasions>>>);
}
